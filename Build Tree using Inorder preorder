#include <iostream>
#include<queue>
using namespace std;

class Node{
public:
    int data;
    Node*left;
    Node*right;

  Node(int data){
    this->data=data;
    this->left=NULL;
    this->right=NULL;
  }
};

int findPosition(int arr[],int n,int Element){
  for(int i=0;i<n;i++){
    if(arr[i]==Element){
      return i;
    }
  }
  return -1;
}
Node* buildTreeFromPreInorder(int inorder[],int preorder[],int size,int &preIndex,int inorderStart,int inorderEnd){
  //base case
  if(preIndex>=size || inorderStart>inorderEnd ){
    return NULL;
  }
  // step-1:
  int Element=preorder[preIndex++];
  Node*root=new Node(Element);
  int pos=findPosition(inorder,size,Element);

  //step-2:
root->left=buildTreeFromPreInorder(inorder,preorder,size,preIndex,inorderStart,pos-1);
  root->right=buildTreeFromPreInorder(inorder,preorder,size,preIndex,pos+1,inorderEnd);

  return root;
  
}

void levelOrderTraversal(Node* root){
  queue<Node*>q;
  q.push(root);
  q.push(NULL);
  while(!q.empty()){
  //step-1
    Node* temp=q.front();
   //step-2:
    q.pop();
    //step-3:
    if(temp==NULL){
      cout<<endl;
      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
       cout<< temp->data <<" ";
    //step-4:
    if(temp->left){
      q.push(temp->left);
    }
    if(temp->right){
      q.push(temp->right);
    }
    }

  }
}

int main() {
  int inorder[]={40,20,50,10,60,30,70};
  int preorder[]={10,20,40,50,30,60,70};
  int size=7;
  int preIndex=0;
  int inorderStart=0;
  int inorderEnd=size-1;

  Node*root=buildTreeFromPreInorder(inorder,preorder,size,preIndex,inorderStart,inorderEnd);

 cout<<"printing the Tree:"<<endl;
  levelOrderTraversal(root);
  return 0;
}
